{"version":3,"sources":["components/Equation.js","components/EquationsList.js","components/View.js","components/NumberButton.js","components/OperatorButton.js","components/DotButton.js","components/BigEqualButton.js","components/BigClearButton.js","components/AllClearButton.js","App.js","serviceWorker.js","index.js"],"names":["Equation","props","firstNumber","operator","secondNumber","result","EquationsList","className","storeEquations","map","equation","key","id","View","inputState","equalSign","undefined","NumberButton","onClick","handleNumberClick","value","children","OperatorButton","handleBigOperatorClick","DotButton","handleDotClick","BigEqualButton","handleBigEqualClick","BigClearButton","bigClearClick","AllClearButton","allClearClick","App","useState","setInputState","setOperator","setFirstNumber","setSecondNumber","setEqualSign","setEquation","setResult","setStoreEquations","tempOperator","setTempOperator","replace","handleOperatorClick","inputClearClickToEmpty","inputClearClickToZero","equationClearClick","decimalPlaces","num","match","Math","max","length","handleEqualClick","largerDecimalDigits","sumDecimalDigits","roundTo8","Number","round","toFixed","doMathClick","useEffect","uuid","storeEquationsClick","temp","slice","includes","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0cfd076b.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Equation(props) {\n  return (\n    <li>\n      {props.firstNumber} {props.operator} {props.secondNumber} = {props.result}\n    </li>\n  );\n};\n\nexport default Equation;\n","import React from 'react';\nimport Equation from './Equation';\n\n\nfunction EquationsList(props) {\n  return (\n    <div className=\"equation-list\">\n      {props.storeEquations.map(\n        equation => <Equation key={equation.id} \n                              firstNumber={equation.firstNumber} \n                              operator={equation.operator} \n                              secondNumber={equation.secondNumber} \n                              result={equation.result} />\n      )}\n    </div>\n  );\n};\n\nexport default EquationsList;","import React from 'react';\n\nfunction View(props) {\n  const { inputState, firstNumber, operator, secondNumber, equalSign, result } = props;\n  if (firstNumber === undefined) {\n    return (\n      <div className=\"view\">\n        {inputState}\n      </div>\n    )\n  } else {\n    if (secondNumber === undefined) {\n      return (\n        <div className=\"view\">\n          {firstNumber} {operator} {inputState} {equalSign} {result}\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"view\">\n          {firstNumber} {operator} {secondNumber} {equalSign} {result}\n        </div>\n      )\n    }\n  };\n};\n\nexport default View;\n","import React from 'react';\n\nfunction NumberButton(props) {\n  return (\n    <button className=\"button\" onClick={() => props.handleNumberClick(props.value)}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default NumberButton;","import React from 'react';\n\nfunction OperatorButton(props) {\n  return (\n    <button className=\"operator\" onClick={() => props.handleBigOperatorClick(props.value)}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default OperatorButton;","import React from 'react';\n\nfunction DotButton(props) {\n  return (\n    <button id=\"dot\" onClick={() => props.handleDotClick(props.value)}>\n      {props.children}\n    </button>\n  );\n};\n\nexport default DotButton;","import React from 'react';\n\nfunction BigEqualButton(props) {\n  return (\n    <button id=\"equal-sign\" onClick={() => props.handleBigEqualClick()}>\n      =\n    </button>\n  );\n};\n\nexport default BigEqualButton;","import React from 'react';\n\nfunction BigClearButton(props) {\n  return (\n    <button id=\"clear\" onClick={() => props.bigClearClick()}>\n      C\n    </button>\n  );\n};\n\nexport default BigClearButton;","import React from 'react';\n\nfunction AllClearButton(props) {\n  return (\n    <button id=\"all-clear\" onClick={() => props.allClearClick()}>\n      AC\n    </button>\n  );\n};\n\nexport default AllClearButton;\n\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport uuid from 'uuid/v1';\nimport { Scrollbar } from 'react-scrollbars-custom';\n\nimport EquationsList from './components/EquationsList';\nimport View from './components/View';\nimport NumberButton from './components/NumberButton';\nimport OperatorButton from './components/OperatorButton';\nimport DotButton from './components/DotButton';\nimport BigEqualButton from './components/BigEqualButton';\nimport BigClearButton from './components/BigClearButton';\nimport AllClearButton from './components/AllClearButton';\n\nfunction App() {\n  const [inputState, setInputState] = useState(\"0\");\n  const [operator, setOperator] = useState();\n  const [firstNumber, setFirstNumber] = useState();\n  const [secondNumber, setSecondNumber] = useState();\n  const [equalSign, setEqualSign] = useState();\n  const [equation, setEquation] = useState();  \n  const [result, setResult] = useState();  \n  const [storeEquations, setStoreEquations] = useState([]);  \n  const [tempOperator, setTempOperator] = useState();\n\n  const handleNumberClick = (value) => {\n    if (firstNumber === undefined) {\n      if (inputState[1] !== \".\") {\n        setInputState(inputState.replace(/^0+/, \"\") + value);\n      } else {\n        setInputState(inputState + value);\n      };\n    } else {\n      if (operator !== undefined) {\n        if (inputState[1] !== \".\") {\n          setInputState(inputState.replace(/^0+/, \"\") + value);\n        } else {\n          setInputState(inputState + value);\n        };\n      };\n    };\n  };\n\n  const handleFirstEnterClick = () => {\n    // will run only if there's something in inputState\n    if (inputState !== \"\") {\n      setFirstNumber(inputState);\n    };\n  };\n\n  const handleSecondEnterClick = () => {\n    // will run only if there's something in inputState\n    if (inputState !== \"\") {\n      setSecondNumber(inputState);\n    };\n  };\n\n  const handleDotClick = (value) => {\n    if (firstNumber === undefined) {\n      if (inputState.slice(-1) !== \".\" && !inputState.includes(\".\")) {\n        setInputState(inputState + value);\n      };\n    } else if (operator !== undefined) {\n      if (inputState.slice(-1) !== \".\" && !inputState.includes(\".\")) {\n        if (inputState === \"\") {\n          setInputState(inputState + \"0\" + value);\n        } else {\n          setInputState(inputState + value);\n        };\n      };\n    };\n  };\n\n  const handleBigOperatorClick = (value) => {\n    // when nothing in firstNumber slot\n    if (firstNumber === undefined) {\n      handleFirstEnterClick();\n      handleOperatorClick(value);\n      handleBigEqualClick();\n    };\n    // there's something in firstNumber\n    // and if there's no operator\n    if (operator === undefined) {\n      handleOperatorClick(value);\n      inputClearClickToEmpty();\n    } else {\n      // if there's an operator\n      // and if there's something in the secondNumber slot\n      if (inputState !== \"\") {\n        setTempOperator(value);\n        handleBigEqualClick();\n      } else {\n        handleOperatorClick(value);\n      };\n    };\n  };\n  \n  const handleBigEqualClick = () => {\n    if (operator !== undefined) {\n      handleSecondEnterClick();\n    };\n  };\n\n  const bigClearClick = () => {\n    if (operator !== undefined && inputState !== \"\") {\n      inputClearClickToEmpty();\n    } else {\n      inputClearClickToZero();\n      equationClearClick();\n    };\n  };\n\n  const allClearClick = () => {\n    bigClearClick();\n    setStoreEquations([]);\n  };\n\n  const handleOperatorClick = (value) => {\n    if (inputState !== \"\" || firstNumber !== undefined) {\n      setOperator(value);\n    };\n  };\n  \n  const handleMakeEquationClick = () => {\n    setEquation({\n      id: uuid(),\n      firstNumber: firstNumber,\n      operator: operator,\n      secondNumber: secondNumber,\n      result: result\n    });\n  };\n\n  const doMathClick = () => {\n    const largerDecimalDigits = Math.max(decimalPlaces(firstNumber), decimalPlaces(secondNumber));\n    const sumDecimalDigits = decimalPlaces(firstNumber) + decimalPlaces(secondNumber);\n    // setting max rounding decimal places to 8\n    const roundTo8 = (value) => {\n      return Number(Math.round(value+'e'+8)+'e-'+8);\n    };\n    switch(operator) {\n      case \"+\":\n        setResult(roundTo8((Number(firstNumber) + Number(secondNumber)).toFixed(largerDecimalDigits)));\n        break;\n      case \"-\":\n        setResult(roundTo8((Number(firstNumber) - Number(secondNumber)).toFixed(largerDecimalDigits)));\n        break;\n      case \"x\":\n        setResult(roundTo8((Number(firstNumber) * Number(secondNumber)).toFixed(sumDecimalDigits)));\n        break;\n      case \"÷\":\n        setResult(roundTo8((Number(firstNumber) / Number(secondNumber))));\n        break;\n      default:  \n    };\n  };\n\n  // copied from\n  // https://stackoverflow.com/questions/10454518/javascript-how-to-retrieve-the-number-of-decimals-of-a-string-number\n  const decimalPlaces = (num) => {\n    const match = (''+num).match(/(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/);\n    if (!match) { return 0; }\n    return Math.max(0, (match[1] ? match[1].length : 0) - (match[2] ? +match[2] : 0));\n  };\n\n  const handleEqualClick = () => {\n    setEqualSign(\"=\");\n    doMathClick();\n  };\n  \n  useEffect(() => {\n    if (secondNumber !== undefined) {\n      handleEqualClick();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [secondNumber]);\n\n  useEffect(() => {\n    if (result !== undefined) {\n      handleMakeEquationClick();\n    }    \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [result]);\n  \n  useEffect(() => {\n    if (equation !== undefined) {\n      storeEquationsClick();\n      inputClearClickToEmpty();\n      const temp = result;\n      equationClearClick();\n      setFirstNumber(temp);\n      setOperator(tempOperator);\n      setTempOperator(undefined);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [equation]);\n\n  const inputClearClickToZero = () => {\n    setInputState(\"0\");\n  };\n  \n  const inputClearClickToEmpty = () => {\n    setInputState(\"\");\n  };\n\n  const equationClearClick = () => {\n    setFirstNumber(undefined);\n    setOperator(undefined);\n    setSecondNumber(undefined);\n    setEqualSign(undefined);\n    setResult(undefined);\n  };\n\n  const storeEquationsClick = () => {\n    setStoreEquations([...storeEquations, equation]);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"calc-wrapper\">\n        <div className=\"display\">\n          <Scrollbar>\n            <EquationsList storeEquations={storeEquations} />\n            <View inputState={inputState} firstNumber={firstNumber} operator={operator} secondNumber={secondNumber} equalSign={equalSign} result={result} />\n          </Scrollbar>\n        </div>\n        <div className=\"number-buttons\">\n          <div className=\"row\">\n            <NumberButton value={7} handleNumberClick={handleNumberClick}>7</NumberButton> \n            <NumberButton value={8} handleNumberClick={handleNumberClick}>8</NumberButton> \n            <NumberButton value={9} handleNumberClick={handleNumberClick}>9</NumberButton> \n            <BigClearButton bigClearClick={bigClearClick} />\n            <AllClearButton allClearClick={allClearClick} />\n          </div>\n          <div className=\"row\">\n            <NumberButton value={4} handleNumberClick={handleNumberClick}>4</NumberButton> \n            <NumberButton value={5} handleNumberClick={handleNumberClick}>5</NumberButton> \n            <NumberButton value={6} handleNumberClick={handleNumberClick}>6</NumberButton> \n            <OperatorButton value={\"x\"} handleBigOperatorClick={handleBigOperatorClick}>x</OperatorButton> \n            <OperatorButton value={\"÷\"} handleBigOperatorClick={handleBigOperatorClick}>÷</OperatorButton> \n          </div>\n          <div className=\"row\">\n            <NumberButton value={1} handleNumberClick={handleNumberClick}>1</NumberButton> \n            <NumberButton value={2} handleNumberClick={handleNumberClick}>2</NumberButton> \n            <NumberButton value={3} handleNumberClick={handleNumberClick}>3</NumberButton> \n            <OperatorButton value={\"+\"} handleBigOperatorClick={handleBigOperatorClick}>+</OperatorButton> \n            <OperatorButton value={\"-\"} handleBigOperatorClick={handleBigOperatorClick}>-</OperatorButton> \n          </div>\n          <div className=\"last-row\">\n            <NumberButton className=\"zero\" value={0} handleNumberClick={handleNumberClick}>0</NumberButton> \n            <DotButton value={\".\"} handleDotClick={handleDotClick}>.</DotButton> \n            <BigEqualButton handleBigEqualClick={handleBigEqualClick}>=</BigEqualButton>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}